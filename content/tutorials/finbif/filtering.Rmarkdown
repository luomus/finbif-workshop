---
linktitle: 8. Filtering
title: Filtering Occurrence Data
draft: no
toc: yes
type: book
weight: 9
---

```{r setup, include = FALSE}
cache_path <- "../../../cache/"
knitr::opts_chunk$set(
  echo = TRUE, comment = "#>", cache = TRUE, cache.path = cache_path
)
library(finbif)
options(finbif_tz = "Europe/Helsinki", finbif_cache_path = cache_path)
```

When getting records from FinBIF it's often a good idea to filter the data at
request time rather than after you have downloaded the data. Pre-filtering the
data will save bandwidth and local post-processing time. There are many options
for filtering occurrence records, for the full list of filtering options refer
to the package documentation.
```{r filters-help, eval = FALSE}
?filters
```

You can filter occurrence records using the `filter` argument to
`finbif_occurrence`. The filter argument takes a list (or vector for some simple
filters), where the element names are the names of the filters and the elements
themselves are the filter values. The form of the filter varies depending on the
filter being used and is outlined in the documentation. In many cases the values
a filter can take can be found using `finbif_metadata()` and associated
functions (see [section 7. Metadata](tutorials/finbif/metadata/))

## Location
### Places

A number of filters allow you to restrict records geographically by place name.
These include `country`, `province`, `municipality` and `bird_assoc_area`
(BirdLife Finland local groups).
```{r filter-place}
finbif_occurrence(filter = c(country = "Finland"))
```

### Coordinates
You can also filter geographically by specifying coordinates. The coordinates
must be supplied with at least a latitude, longitude and a valid coordinate
system.
```{r filter-coords}
finbif_occurrence(
  filter = list(
    coordinates = list(lat = c(60, 68), lon = c(20, 30), system = "wgs84")
  )
)
```

## Dates
Another common way to filter is by date using the `date_range_ymd` filter.
Specifying a single date will filter records that fall on the day or within the
month or year indicated.
```{r single-date}
finbif_occurrence(filter = list(date_range_ymd = c("2019-12")))
```

You can further customize the date range filter by specifying an end date
allowing an arbitrary range of dates.
```{r date-range}
finbif_occurrence(
  filter = list(date_range_ymd = c("2019-06-01", "2019-12-31"))
)
```

You can also filter by time of year (i.e., a date range across all years) using
the `date_range_md` filter (note `_md` rather than `_ymd`). To filter a range of
dates that overlaps with the end of the year (e.g., winter) you'll need to
supply two date ranges: one for the end of the year and one for the start.
```{r every-winter}
finbif_occurrence(
  filter = list(
    date_range_md = c(begin = "12-21", end = "12-31"),
    date_range_md = c(begin = "01-01", end = "02-20")
  )
)
```

## Data quality
Not all data in FinBIF is created equal. Often it will be desirable to use
`{finbif}`'s data quality filters. The package documentation outlines each
quality filter in detail.

To restrict occurrence records to the highest quality level you can use the
following set of filters.
```{r quality-strict}
strict <- list(
  collection_quality = "professional",
  coordinates_uncertainty_max = 1,
  record_quality = "expert_verified"
)
```
These filters will limit the occurrence records to those belonging to the most
reliable collections, have the least coordinate uncertainty (most precise
location data), and have reliable taxonomic identifications.

At the other end of the spectrum, you can also allow all records regardless of
quality with the following filter.
```{r quality-permissive}
permissive <- list(
  quality_issues = "both",
  record_reliability = c(
    "reliable", "unassessed", "unreliable"),
  record_quality = c(
    "expert_verified", "community_verified", 
    "unassessed", "uncertain", "erroneous"
  )
)
```
This will include all records, both with and without, quality issues.

The highest quality records are only a small fraction of all the records that
are available.
```{r show-quality}
finbif_occurrence(filter = list(strict, permissive), count_only = TRUE)
```

## Collections
You can filter by collection using the collection ID, the collection name or
the abbreviated collection name (if available).
```{r filter-inaturalist}
finbif_occurrence(
  filter = c(collection = "iNaturalist Suomi Finland"), count_only = TRUE
)
```

You can also use the results of a call to the `finbif_collections` function as
filter directly.
```{r filter-collection-object}
collections <- finbif_collections(
  filter = geographic_coverage == "Finland",
  nmin   = 10000
)

finbif_occurrence(filter = list(collection = collections), count_only = TRUE)
```

## Informal groups
Many informal taxonomic groups align with formal taxonomic groups (e.g., birds)
but some, such as "Reptiles & amphibians" do not, making the `informal_group`
potential useful in some circumstances.
```{r filter-informal-group}
finbif_occurrence(filter = list(informal_groups = "Reptiles and amphibians"))
```

## Taxon status
Other useful filters include those associated with the status of taxa or their
presence on various checklists. The function `finbif_metadata` can be used to
see what the allowable values are for these filters.

### Administrative status
Many taxa appear on various lists such as the EU's invasive species list. The
`adminstrative_status` filter makes it easy to search for records of birds
considered invasive in the EU.
```{r filter-admin-status}
finbif_occurrence("birds", filter = list(regulatory_status = "EU_INVSV"))
```

### Red list
Using the `red_list` filter you can search for records of near threatened
mammals.
```{r filter-red-list}
finbif_occurrence("mammals", filter = list(red_list_status = "NT"))
```

### Finnish occurrence
Many taxa in the FinBIF database have been given an "Finnish occurrence status"
and this status can be used to filter records.
```{r filter-occ-status}
finbif_occurrence(filter = c(finnish_occurrence_status = "rare"))
```

You can also use the negation of the `finnish_occurrence_status` to filter out
records of that have a given occurrence status. For example, you can get
records of bird species that are not considered to have stable populations in
Finland with the following filter.
```{r filter-occ-status-neg}
finbif_occurrence(
  "Birds",
  filter = c(finnish_occurrence_status_neg = "stable", taxon_rank = "species")
)
```
